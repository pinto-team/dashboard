import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'

import * as React from 'react'
import { JSX } from 'react'
import { useForm } from 'react-hook-form'

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { useI18n } from '@/shared/hooks/useI18n'
import { Create{{Entity}}Request } from '@/features/{{entities}}/model/types'

type Props = Readonly<{
defaultValues?: Partial<Create{{Entity}}Request>
    onSubmit: (data: Create{{Entity}}Request) => void
    submitting?: boolean
    formId?: string
    apiErrors?: ReadonlyArray<{ field: string; message: string }>
    }>

    export default function {{Entity}}Form({
    defaultValues,
    onSubmit,
    submitting = false,
    formId = '{{entity}}-form',
    apiErrors,
    }: Props): JSX.Element {
    const { t } = useI18n()

    // ---------- Zod schema (بر اساس createFields) ----------
    const schema = React.useMemo(
    () =>
    z.object({
    {{#each createFields}}
    {{!-- رشته‌ها --}}
        {{#if (eq type "string")}}
            {{name}}: z.string().trim()
            {{#if (includes name "name")}}.min(1, t('validation.required')).min(2, t('validation.min_length', { n: 2 })){{/if}}
            {{#if (includes name "description")}}.max(500, t('validation.max_length', { n: 500 })){{/if}},
        {{/if}}

        {{!-- عددی‌ها --}}
        {{#if (eq type "number")}}
            {{name}}: z.number({ invalid_type_error: t('validation.number') }),
        {{/if}}

        {{!-- بولین --}}
        {{#if (eq type "boolean")}}
            {{name}}: z.boolean(),
        {{/if}}

        {{!-- آرایه‌ها --}}
        {{#if (isArrayType type)}}
            {{name}}: z.array(z.any()),
        {{/if}}

        {{!-- آبجکت‌ها: Record<string, any> --}}
        {{#if (isRecord type)}}
            {{name}}: z.record(z.any()),
        {{/if}}

        {{!-- سایر/ناشناخته --}}
        {{#unless (or (eq type "string") (eq type "number") (eq type "boolean") (isArrayType type) (isRecord type))}}
            {{name}}: z.any(),
        {{/unless}}
    {{/each}}
    }),
    [t],
    )

    const {
    register,
    handleSubmit,
    formState: { errors },
    setError,
    reset,
    } = useForm<Create{{Entity}}Request>({
    resolver: zodResolver(schema),
    defaultValues: {
    {{#each createFields}}
    {{!-- مقداردهی پیش‌فرض مناسب نوع --}}
        {{#if (eq type "string")}}
            {{name}}: '',
        {{/if}}
        {{#if (eq type "number")}}
            {{name}}: 0,
        {{/if}}
        {{#if (eq type "boolean")}}
            {{name}}: false,
        {{/if}}
        {{#if (isArrayType type)}}
            {{name}}: [],
        {{/if}}
        {{#if (isRecord type)}}
            {{name}}: {},
        {{/if}}
        {{#unless (or (eq type "string") (eq type "number") (eq type "boolean") (isArrayType type) (isRecord type))}}
            {{name}}: undefined,
        {{/unless}}
    {{/each}}
    ...defaultValues,
    } as any, // در صورت تفاوت جزئی تایپ‌ها
    mode: 'onBlur',
    })

    React.useEffect(() => {
    if (defaultValues) {
    reset({ ...defaultValues } as any)
    }
    }, [defaultValues, reset])

    React.useEffect(() => {
    if (!apiErrors || apiErrors.length === 0) return
    apiErrors.forEach((err) => {
    const path = err.field?.split('.')?.pop() ?? err.field
    {{!-- روی فیلدهای موجود خطای سرور ست می‌کنیم --}}
    {{#each createFields}}
        if (path === '{{name}}') {
        setError('{{name}}' as any, {
        type: 'server',
        message: err.message,
        })
        }
    {{/each}}
    })
    }, [apiErrors, setError])

    return (
    <form
        id={formId}
        noValidate
        className="grid gap-6"
        onSubmit={handleSubmit((values) => {
    const cleaned = {
    {{#each createFields}}
        {{#if (eq type "string")}}
            {{name}}: (values.{{name}} ?? '').toString().trim(),
        {{/if}}
        {{#if (eq type "number")}}
            {{name}}: typeof values.{{name}} === 'number'
            ? values.{{name}}
            : Number(values.{{name}} ?? 0),
        {{/if}}
        {{#if (eq type "boolean")}}
            {{name}}: Boolean(values.{{name}}),
        {{/if}}
        {{#if (isArrayType type)}}
            {{name}}: Array.isArray(values.{{name}}) ? values.{{name}} : [],
        {{/if}}
        {{#if (isRecord type)}}
            {{name}}: values.{{name}} && typeof values.{{name}} === 'object' ? values.{{name}} : {},
        {{/if}}
        {{#unless (or (eq type "string") (eq type "number") (eq type "boolean") (isArrayType type) (isRecord type))}}
            {{name}}: values.{{name}},
        {{/unless}}
    {{/each}}
    } as Create{{Entity}}Request
    onSubmit(cleaned)
    })}
    >
    <Card className="overflow-hidden shadow-sm">
        <CardHeader className="bg-muted/50">
            <CardTitle className="text-lg font-semibold">
                {t('{{entity}}.form.title')}
            </CardTitle>
        </CardHeader>

        <CardContent className="grid gap-6 p-6 md:grid-cols-2">
            <div className="flex flex-col gap-4">
                {{!-- فیلدها بر اساس نوع UI مناسب می‌گیرند --}}
                {{#each createFields}}
                {{!-- string: اگر نام شامل description بود → textarea --}}
                    {{#if (eq type "string")}}
                        {{#if (includes name "description")}}
                            <div>
                                <Label htmlFor="{{../entity}}-{{name}}">
                                    {t('{{../entity}}.form.{{name}}')}
                                </Label>
                                <textarea
                                    id="{{../entity}}-{{name}}"
                                    placeholder={t('{{../entity}}.form.{{name}}_ph')}
                                    className="min-h-24 w-full resize-vertical rounded-md border bg-background px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50"
                                    aria-invalid={Boolean(errors.{{name}})}
                                    {...register('{{name}}' as const)}
                                />
                                {errors.{{name}} && (
                                <p className="mt-1 text-xs text-destructive">
                                    {errors.{{name}}.message as string}
                                </p>
                                )}
                            </div>
                        {{else}}
                            <div>
                                <Label htmlFor="{{../entity}}-{{name}}">
                                    {t('{{../entity}}.form.{{name}}')}{{#if (includes name "name")}}*{{/if}}
                                </Label>
                                <Input
                                    id="{{../entity}}-{{name}}"
                                    placeholder={t('{{../entity}}.form.{{name}}_ph')}
                                    autoComplete="off"
                                    aria-invalid={Boolean(errors.{{name}})}
                                    {...register('{{name}}' as const)}
                                />
                                {errors.{{name}} && (
                                <p className="mt-1 text-xs text-destructive">
                                    {errors.{{name}}.message as string}
                                </p>
                                )}
                            </div>
                        {{/if}}
                    {{/if}}

                    {{!-- number --}}
                    {{#if (eq type "number")}}
                        <div>
                            <Label htmlFor="{{../entity}}-{{name}}">
                                {t('{{../entity}}.form.{{name}}')}
                            </Label>
                            <Input
                                id="{{../entity}}-{{name}}"
                                type="number"
                                inputMode="decimal"
                                aria-invalid={Boolean(errors.{{name}})}
                                {...register('{{name}}' as const, { valueAsNumber: true })}
                            />
                            {errors.{{name}} && (
                            <p className="mt-1 text-xs text-destructive">
                                {errors.{{name}}.message as string}
                            </p>
                            )}
                        </div>
                    {{/if}}

                    {{!-- boolean --}}
                    {{#if (eq type "boolean")}}
                        <div className="flex items-center gap-2">
                            <input
                                id="{{../entity}}-{{name}}"
                                type="checkbox"
                                aria-invalid={Boolean(errors.{{name}})}
                                {...register('{{name}}' as const)}
                            />
                            <Label htmlFor="{{../entity}}-{{name}}">
                                {t('{{../entity}}.form.{{name}}')}
                            </Label>
                        </div>
                    {{/if}}

                    {{!-- array / record: JSON textarea ساده --}}
                    {{#if (or (isArrayType type) (isRecord type))}}
                        <div>
                            <Label htmlFor="{{../entity}}-{{name}}">
                                {t('{{../entity}}.form.{{name}}')}
                            </Label>
                            <textarea
                                id="{{../entity}}-{{name}}"
                                placeholder="{ /* JSON */ }"
                                className="min-h-24 w-full resize-vertical rounded-md border bg-background px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 font-mono"
                                aria-invalid={Boolean(errors.{{name}})}
                                {{!-- JSON binding: برای سادگی به عنوان string نگه نمی‌داریم؛
                                      اگر می‌خواهی واقعی JSON ادیت شود، باید کنترل سفارشی بسازی.
                                      اینجا ساده نگه داشتیم و به همان object/array bind می‌کنیم --}}
                                {...register('{{name}}' as const)}
                            />
                            {errors.{{name}} && (
                            <p className="mt-1 text-xs text-destructive">
                                {String(errors.{{name}}.message)}
                            </p>
                            )}
                        </div>
                    {{/if}}

                    {{!-- سایر انواع ناشناخته: input text --}}
                    {{#unless (or (eq type "string") (eq type "number") (eq type "boolean") (isArrayType type) (isRecord type))}}
                        <div>
                            <Label htmlFor="{{../entity}}-{{name}}">
                                {t('{{../entity}}.form.{{name}}')}
                            </Label>
                            <Input
                                id="{{../entity}}-{{name}}"
                                aria-invalid={Boolean(errors.{{name}})}
                                {...register('{{name}}' as const)}
                            />
                            {errors.{{name}} && (
                            <p className="mt-1 text-xs text-destructive">
                                {String(errors.{{name}}.message)}
                            </p>
                            )}
                        </div>
                    {{/unless}}
                {{/each}}
            </div>
        </CardContent>
    </Card>
    </form>
    )
    }
