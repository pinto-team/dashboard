import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import * as React from 'react'
import { FormProvider, useForm } from 'react-hook-form'

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { useI18n } from '@/shared/hooks/useI18n'
import CategoryImageField from '@/features/categories/components/CategoryImageField'
import CategoryGeneralFields from '@/features/categories/components/CategoryGeneralFields'
import CategoryMetadataFields from '@/features/categories/components/CategoryMetadataFields'
import type { CategoryFormValues, CreateCategoryRequest } from '@/features/categories/model/types'
import {
    cleanLocalizedField,
    ensureLocalizedDefaults,
} from '@/shared/utils/localized'
import { slugify } from '@/shared/utils/slug'

type Props = Readonly<{
    defaultValues?: Partial<CategoryFormValues>
    initialImageUrl?: string | null
    onSubmit: (data: CreateCategoryRequest) => void
    submitting?: boolean
    formId?: string
    apiErrors?: ReadonlyArray<{ field: string; message: string }>
}>

const SUPPORTED_LOCALES = ['en-US', 'fa-IR'] as const

function createSchema(t: ReturnType<typeof useI18n>['t']): z.ZodType<CategoryFormValues> {
    const localizedStringRule = z
        .string()
        .trim()
        .min(1, t('validation.required'))
        .min(2, t('validation.min_length', { n: 2 }))
        .max(160, t('validation.max_length', { n: 160 }))

    const optionalDescriptionRule = z
        .string()
        .trim()
        .max(500, t('validation.max_length', { n: 500 }))
        .optional()

    return z
        .object({
            name: z
                .object({ 'en-US': localizedStringRule, 'fa-IR': localizedStringRule })
                .catchall(localizedStringRule.optional()),
            description: z
                .object({
                    'en-US': optionalDescriptionRule,
                    'fa-IR': optionalDescriptionRule,
                })
                .catchall(optionalDescriptionRule)
                .default({ 'en-US': '', 'fa-IR': '' }),
            slug: z
                .string()
                .trim()
                .min(1, t('validation.required'))
                .regex(/^[a-z0-9-]+$/, t('validation.slug')), // only lowercase slug
            parent_id: z.union([z.string().uuid(), z.literal('').transform(() => null), z.null()]).default(null),
            sort_index: z.coerce
                .number({ invalid_type_error: t('validation.number') })
                .int(t('validation.integer'))
                .min(0, t('validation.min_value', { n: 0 }))
                .default(0),
            image_id: z.union([z.string().uuid(), z.literal(''), z.null()]).optional(),
            is_active: z.boolean(),
        })
        .transform((value) => ({
            ...value,
            parent_id: value.parent_id === '' ? null : value.parent_id,
            image_id: value.image_id === '' ? undefined : value.image_id,
        })) as z.ZodType<CategoryFormValues>
}

function buildDefaultValues(defaultValues?: Partial<CategoryFormValues>): CategoryFormValues {
    const nameDefaults = ensureLocalizedDefaults(defaultValues?.name, SUPPORTED_LOCALES)
    const descriptionDefaults = ensureLocalizedDefaults(defaultValues?.description, SUPPORTED_LOCALES)

    return {
        name: { ...nameDefaults, ...(defaultValues?.name ?? {}) },
        description: { ...descriptionDefaults, ...(defaultValues?.description ?? {}) },
        slug: defaultValues?.slug ?? '',
        parent_id: defaultValues?.parent_id ?? null,
        sort_index: defaultValues?.sort_index ?? 0,
        image_id: defaultValues?.image_id ?? undefined,
        is_active: defaultValues?.is_active ?? true,
    }
}

export default function CategoryForm({
    defaultValues,
    initialImageUrl,
    onSubmit,
    submitting = false,
    formId = 'category-form',
    apiErrors,
}: Props) {
    const { t } = useI18n()

    const schema = React.useMemo(() => createSchema(t), [t])
    const initialValues = React.useMemo(
        () => buildDefaultValues(defaultValues),
        [defaultValues],
    )

    const form = useForm<CategoryFormValues>({
        resolver: zodResolver(schema),
        defaultValues: initialValues,
        mode: 'onBlur',
    })

    const { handleSubmit, reset, setError } = form
    const autoGeneratedSlugRef = React.useRef('')
    const englishNameValue = form.watch('name.en-US')

    React.useEffect(() => {
        const subscription = form.watch((_, info) => {
            if (info?.name === 'slug' && info.type === 'change') {
                const currentValue = form.getValues('slug')?.trim() ?? ''
                if (currentValue !== autoGeneratedSlugRef.current) {
                    autoGeneratedSlugRef.current = ''
                }
            }
        })

        return () => subscription.unsubscribe()
    }, [form])

    React.useEffect(() => {
        const currentSlug = form.getValues('slug')?.trim() ?? ''
        const trimmedEnglishName = englishNameValue?.trim() ?? ''

        if (!trimmedEnglishName) {
            if (!currentSlug || currentSlug === autoGeneratedSlugRef.current) {
                if (currentSlug !== '') {
                    autoGeneratedSlugRef.current = ''
                    form.setValue('slug', '', { shouldDirty: true, shouldValidate: true })
                } else {
                    autoGeneratedSlugRef.current = ''
                }
            }
            return
        }

        if (currentSlug && currentSlug !== autoGeneratedSlugRef.current) {
            return
        }

        const generatedSlug = slugify(`category ${trimmedEnglishName}`, 'category')

        if (currentSlug === generatedSlug) {
            autoGeneratedSlugRef.current = generatedSlug
            return
        }

        autoGeneratedSlugRef.current = generatedSlug
        form.setValue('slug', generatedSlug, { shouldDirty: true, shouldValidate: true })
    }, [englishNameValue, form])

    React.useEffect(() => {
        if (defaultValues) {
            reset(buildDefaultValues(defaultValues))
        }
    }, [defaultValues, reset])

    React.useEffect(() => {
        if (!apiErrors || apiErrors.length === 0) return
        apiErrors.forEach((err) => {
            if (!err.field) return
            const normalizedPath = err.field.replace(/\[(\w+)\]/g, '.$1')
            setError(normalizedPath as any, { type: 'server', message: err.message })
        })
    }, [apiErrors, setError])

    return (
        <FormProvider {...form}>
            <form
                id={formId}
                noValidate
                className="grid gap-6"
                onSubmit={handleSubmit((values) => {
                    const sanitizedName = cleanLocalizedField(values.name) ?? {}
                    const sanitizedDescription = cleanLocalizedField(values.description)

                    const payload: CreateCategoryRequest = {
                        name: sanitizedName,
                        slug: values.slug.trim(),
                        is_active: values.is_active,
                    }

                    if (sanitizedDescription && Object.keys(sanitizedDescription).length > 0) {
                        payload.description = sanitizedDescription
                    }

                    if (values.parent_id) {
                        payload.parent_id = values.parent_id
                    }

                    if (Number.isFinite(values.sort_index)) {
                        payload.sort_index = Number(values.sort_index)
                    }

                    const imageId = typeof values.image_id === 'string' ? values.image_id.trim() : values.image_id
                    if (imageId) {
                        payload.image_id = imageId
                    }

                    onSubmit(payload)
                })}
            >
                <input type="hidden" {...form.register('parent_id')} />
                <input type="hidden" {...form.register('image_id')} />
                <Card className="overflow-hidden shadow-sm">
                    <CardHeader className="bg-muted/50">
                        <CardTitle className="text-lg font-semibold">
                            {t('categories.form.title')}
                        </CardTitle>
                    </CardHeader>

                    <CardContent className="grid gap-6 p-6 md:grid-cols-[minmax(0,1fr)_280px]">
                        <div className="flex flex-col gap-6">
                            <CategoryGeneralFields submitting={submitting} />
                            <CategoryMetadataFields submitting={submitting} />
                        </div>
                        <CategoryImageField initialImageUrl={initialImageUrl} submitting={submitting} />
                    </CardContent>
                </Card>
            </form>
        </FormProvider>
    )
}
